dict_1 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 } 
dict_2 = { "name" : "hari", "home" : "bwn", "phn" : 7899292912 }
dict_3 = dict_1
dict_4 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 }
dict_5 = { "name" : "anindya", "house" : "anindya", "contact" : 9046212037 }

# zipping two lists,tuples,sets to create a dictionary.
# ----------------------------------------------------
key = [1,2,3,4] 
values = [ "anindya","bhattacharya","bwn",8472847293 ]
d = zip(key,values)                         # zips two lists to form a key value pair, but returns in zip format.
print(type(d))                              # <class 'zip'>
print(dict(d))                              # {1: 'anindya', 2: 'bhattacharya', 3: 'bwn', 4: 8472847293}

key = ("name","roll","sub")                 
values = ("anindya",127,"science")
d = zip(key,values)                         # zipping 2 tuples
print(dict(d))

key = { 1,2,3,4 }
values = { "anindya","bhattacharya","bwn",8472847293 }
d = zip(key,values)                         # zipping 2 sets. sets are unorganised, insertion order is not preserved in them
print(dict(d))                              # output can be any key for any values . not fixed
'''
o/p- 
{1: 8472847293, 2: 'anindya', 3: 'bhattacharya', 4: 'bwn'}
'''

key = [1,1,2,3,4]                                           # using a list of keys with duplicate values
values = [ "anindya","bhattacharya","bwn",8472847293 ]      
d = zip(key,values)                                         # zipping 2 list, but only accepting the latest value for duplicate keys
print(dict(d))                                              # {1: 'bhattacharya', 2: 'bwn', 3: 8472847293} . 1:"anindya" is not considered

# Unpacking Dictionaries
# ----------------------
dict_1 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 } 
a,b,c = dict_1
print(a,b,c)            # while unpacking only keys get unpacked, not values 
# o/p - name home phn

# when dictionary contains only one pair of key and values then together key and value are unpacked.
dict_1 = { "name" : "anindya" }
a = dict_1
print(a)               # both key and values are printed.
# o/p - {'name': 'anindya'}


# Dictionary functions
# --------------------

dict_1 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 } 
dict_2 = { "ofc" : "cts", "id" : "591931", "sal" : 45 }

# removing keys and values from a dictionary
# ------------------------------------------
print(dict_1.popitem())          # Remove and return an arbitary item (key, value)
print(dict_1.pop("name"))        # corresponding value for the key is removed
# print(dict_1.pop(23))          # key not found. KeyError: 23
dict_1.clear()                   # emptying out the whole dictionary

# update and modification of dictionary . Inserting new data stream in the dictionary
# -----------------------------------------------------------------------------------
d1 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 } 
d2 = { "ofc" : "cts", "id" : "591931", "sal" : 45 } 
d1.update(d2)
print(d1)
# o/p - {'name': 'anindya', 'home': 'anindya', 'phn': 9046212037, 'ofc': 'cts', 'id': '591931', 'sal': 45}


# concating two dictionaries  new_data = {**data1, **data2, **data3}
# ------------------------------------------------------------------

d1 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 } 
d2 = { "ofc" : "cts", "id" : "591931", "sal" : 45 }

#print(d1 + d2) # TypeError: unsupported operand type(s) for +: 'dict' and 'dict'

x = { **d1,**d2 }
print(x) 

# o/p - {'name': 'anindya', 'home': 'anindya', 'phn': 9046212037, 'ofc': 'cts', 'id': '591931', 'sal': 45}

# inserting new data in dictionary (single)
# ----------------------------------------
d1 = { "name" : "anindya", "home" : "anindya", "phn" : 9046212037 } 
d1["roll"] = (127,9)
print(d1)
# o/p - {'name': 'anindya', 'home': 'anindya', 'phn': 9046212037, 'roll': (127, 09)}

# sorting
# ---------
d1 = { 3: "anindya" ,1 : "bhattacharya", 4: "yahoo" ,2 : "google" }
print(sorted(d1.keys()))
for key in sorted(d1.keys()) :
    print("key is {} and value is {}".format(key,d1[key]))

'''
o/p- 
key is 1 and value is bhattacharya
key is 2 and value is google
key is 3 and value is anindya
key is 4 and value is yahoo
'''
# min and max value of keys
# -------------------------

d1 = { 3: "anindya" ,1 : "bhattacharya", 4: "yahoo" ,2 : "google" }
print(max(d1))          # only key is returned
print(min(d1))          # only key is returned
print(d1[max(d1)])      # printing values corresponding to max key
print(d1[min(d1)])      # prinitng value corresponding to min key


# dictionary.fromkeys   # making a sequence work like a key
# ---------------------------------------------------------

syntax : dictionary.fromkeys(sequence,[value])
sequence - sequence of elements which is to be used as keys for the new dictionary
value (Optional) - value which is set to each each element of the dictionary

# Ex -1
# -----
keys = {'a', 'e', 'i', 'o', 'u' }           # # this set of value will behave like a key of a dictionary when used with fromkeys

vowels = dict.fromkeys(keys)
print(vowels)

o/p- {'a': None, 'u': None, 'o': None, 'e': None, 'i': None}

# Ex -2
# -----
keys = {'a', 'e', 'i', 'o', 'u' }
value = 'vowel'

vowels = dict.fromkeys(keys, value)
print(vowels)

o/p - {'a': 'vowel', 'u': 'vowel', 'o': 'vowel', 'e': 'vowel', 'i': 'vowel'}

# Ex -3
# -----

If the provided value is a mutable object (whose value can be modified) like list, dictionary, etc., when the mutable object is modified,
each element of the sequence also gets updated.
This is because, each element is assigned a reference to the same object (points to the same object in the memory).

keys = {'a', 'e', 'i', 'o', 'u' }
value = [1]

vowels = dict.fromkeys(keys, value)
print(vowels)

# updating the value
value.append(2)                     # updating values in list, vowels dictionary is also getting updated.
print(vowels)

o/p -
{'a': [1], 'u': [1], 'o': [1], 'e': [1], 'i': [1]}
{'a': [1, 2], 'u': [1, 2], 'o': [1, 2], 'e': [1, 2], 'i': [1, 2]} 

# -----------------------------------------------------------------
# Dictionary Comprehension
# -----------------------------------------------------------------

#Example -1
#----------
dict1 = {x: x*x for x in range(1,10)}
print(type(dict1))
print(dict1)

#Example -2
#----------
dict1 = {y: y*y*y for y in range(1,10) if y%2 == 0}
print(type(dict1))
print(dict1)

https://www.datacamp.com/community/tutorials/python-dictionary-comprehension

# Example -3
# ----------
converting fahrenheit to celsius

fahrenheit = {'t1': -30,'t2': -20,'t3': -10,'t4': 0}
celsius = {x:round(9/5*(y-32),2) for x,y in fahrenheit.items() }
print(celsius)

o/p- 
{'t1': -111.6, 't2': -93.6, 't3': -75.6, 't4': -57.6}

converting F to C but converting negative values to positive also.

fahrenheit = {'t1': -30,'t2': 20,'t3': 10,'t4': 0}
celsius = {x:round(9/5*(y-32),2)  if round(9/5*(y-32),2) > 0 else -1*round(9/5*(y-32),2) for x,y in fahrenheit.items() }
print(celsius)

o/p-
{'t1': 111.6, 't2': 21.6, 't3': 39.6, 't4': 57.6}











          








